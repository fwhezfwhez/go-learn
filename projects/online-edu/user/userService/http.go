package userService

import (
	"fmt"
	"github.com/fwhezfwhez/errorx"
	"github.com/fwhezfwhez/model_convert/util"
	"github.com/gin-gonic/gin"
	"go-learn/projects/online-edu/user/userModel"
	"go-learn/projects/online-edu/util/dep/common"
	"go-learn/projects/online-edu/util/dep/db"
	"go-learn/projects/online-edu/util/dep/redistool"
	"strconv"
	"time"
)

// Auto generated by github.com/fwhezfwhez/model_convert.GenerateCRUD. You might need import:
// "github.com/gin-gonic/gin"
// "github.com/fwhezfwhez/errorx"
// "github.com/fwhezfwhez/model_convert/util"
//
// "package/path/to/db.DB"
// "package/path/to/userModel.UserInfo"
// "package/path/to/${redis_conn}"
//
// Auto generate by github.com/fwhezfwhez/model_convert.GenerateAddOneAPI().
func HTTPAddUserInfo(c *gin.Context) {
	var param userModel.UserInfo
	if e := c.Bind(&param); e != nil {
		c.JSON(400, gin.H{"message": errorx.Wrap(e).Error()})
		return
	}
	if e := db.DB.Model(&userModel.UserInfo{}).Create(&param).Error; e != nil {
		common.SaveError(errorx.Wrap(e))
		c.JSON(500, gin.H{"message": errorx.Wrap(e).Error()})
		return
	}
	if param.RedisKey() != "" {
		conn := redistool.RedisPool.Get()
		defer conn.Close()
		param.SyncToRedis(conn)
	}
	c.JSON(200, gin.H{"message": "success", "data": param})
}

// Auto generate by github.com/fwhezfwhez/model_convert.GenerateListAPI().
func HTTPListUserInfo(c *gin.Context) {
	var engine = db.DB.Model(&userModel.UserInfo{})

	id := c.DefaultQuery("id", "")
	if id != "" {
		engine = engine.Where("id = ?", id)
	}
	username := c.DefaultQuery("username", "")
	if username != "" {
		engine = engine.Where("username = ?", username)
	}
	realname := c.DefaultQuery("realname", "")
	if realname != "" {
		engine = engine.Where("realname = ?", realname)
	}
	age := c.DefaultQuery("age", "")
	if age != "" {
		engine = engine.Where("age = ?", age)
	}
	createdAtStartTimeStr := c.DefaultQuery("created_at_start", "")
	createdAtEndTimeStr := c.DefaultQuery("created_at_end", "")
	var createdAtStart, createdAtEnd time.Time
	if createdAtStartTimeStr != "" && createdAtEndTimeStr != "" {
		var e error
		createdAtStart, e = time.ParseInLocation("2006-01-02 15:04:05", createdAtStartTimeStr, time.Local)
		if e != nil {
			c.JSON(400, gin.H{"message": e.Error()})
			return
		}
		createdAtEnd, e = time.ParseInLocation("2006-01-02 15:04:05", createdAtEndTimeStr, time.Local)
		if e != nil {
			c.JSON(400, gin.H{"message": e.Error()})
			return
		}
		engine = engine.Where("created_at between ? and ?", createdAtStart, createdAtEnd.AddDate(0, 0, 1))
	}
	page := c.DefaultQuery("page", "1")
	size := c.DefaultQuery("size", "20")
	orderBy := c.DefaultQuery("order_by", "")
	var count int
	if e := engine.Count(&count).Error; e != nil {
		common.SaveError(errorx.Wrap(e))
		c.JSON(500, gin.H{"message": errorx.Wrap(e).Error()})
		return
	}
	var list = make([]userModel.UserInfo, 0, 20)
	if count == 0 {
		c.JSON(200, gin.H{"message": "success", "count": 0, "data": list})
		return
	}
	limit, offset := util.ToLimitOffset(size, page, count)
	engine = engine.Limit(limit).Offset(offset)
	if orderBy != "" {
		engine = engine.Order(util.GenerateOrderBy(orderBy))
	}
	if e := engine.Find(&list).Error; e != nil {
		common.SaveError(errorx.Wrap(e))
		c.JSON(500, gin.H{"message": errorx.Wrap(e).Error()})
		return
	}
	c.JSON(200, gin.H{"message": "success", "count": count, "data": list})
}

// Auto generate by github.com/fwhezfwhez/model_convert.GenerateGetOneAPI().
func HTTPGetUserInfo(c *gin.Context) {
	id := c.Param("id")
	idInt, e := strconv.Atoi(id)
	if e != nil {
		c.JSON(400, gin.H{"message": fmt.Sprintf("param 'id' requires int but got %s", id)})
		return
	}
	var count int
	if e := db.DB.Model(&userModel.UserInfo{}).Where("id=?", idInt).Count(&count).Error; e != nil {
		common.SaveError(errorx.Wrap(e))
		c.JSON(500, gin.H{"message": errorx.Wrap(e).Error()})
		return
	}
	if count == 0 {
		c.JSON(200, gin.H{"message": fmt.Sprintf("id '%s' record not found", id)})
		return
	}
	var instance userModel.UserInfo
	if e := db.DB.Model(&userModel.UserInfo{}).Where("id=?", id).First(&instance).Error; e != nil {
		common.SaveError(errorx.Wrap(e))
		c.JSON(500, gin.H{"message": errorx.Wrap(e).Error()})
		return
	}
	c.JSON(200, gin.H{"message": "success", "data": instance})
}

// Auto generate by github.com/fwhezfwhez/model_convert.GenerateUpdateOneAPI().
func HTTPUpdateUserInfo(c *gin.Context) {
	id := c.Param("id")
	idInt, e := strconv.Atoi(id)
	if e != nil {
		c.JSON(400, gin.H{"message": fmt.Sprintf("param 'id' requires int but got %s", id)})
		return
	}
	var count int
	if e := db.DB.Model(&userModel.UserInfo{}).Where("id=?", idInt).Count(&count).Error; e != nil {
		common.SaveError(errorx.Wrap(e))
		c.JSON(500, gin.H{"message": errorx.Wrap(e).Error()})
		return
	}
	if count == 0 {
		c.JSON(200, gin.H{"message": fmt.Sprintf("id '%s' record not found", id)})
		return
	}
	var param userModel.UserInfo
	if e := c.Bind(&param); e != nil {
		c.JSON(400, gin.H{"message": errorx.Wrap(e).Error()})
		return
	}
	var instance userModel.UserInfo
	if e := db.DB.Model(&userModel.UserInfo{}).Where("id=?", idInt).First(&instance).Error; e != nil {
		common.SaveError(errorx.Wrap(e))
		c.JSON(500, gin.H{"message": errorx.Wrap(e).Error()})
		return
	}
	if e := db.DB.Model(&userModel.UserInfo{}).Where("id=?", id).Updates(param).Error; e != nil {
		common.SaveError(errorx.Wrap(e))
		c.JSON(500, gin.H{"message": errorx.Wrap(e).Error()})
		return
	}
	if instance.RedisKey() != "" {
		conn := redistool.RedisPool.Get()
		defer conn.Close()
		instance.DeleteFromRedis(conn)
	}
	c.JSON(200, gin.H{"message": "success"})
}

// Auto generate by github.com/fwhezfwhez/model_convert.GenerateDeleteOneAPI().
func HTTPDeleteUserInfo(c *gin.Context) {
	id := c.Param("id")
	idInt, e := strconv.Atoi(id)
	if e != nil {
		c.JSON(400, gin.H{"message": fmt.Sprintf("param 'id' requires int but got %s", id)})
		return
	}
	var count int
	if e := db.DB.Model(&userModel.UserInfo{}).Where("id=?", idInt).Count(&count).Error; e != nil {
		common.SaveError(errorx.Wrap(e))
		c.JSON(500, gin.H{"message": errorx.Wrap(e).Error()})
		return
	}
	if count == 0 {
		c.JSON(200, gin.H{"message": fmt.Sprintf("id '%s' record not found", id)})
		return
	}
	var instance userModel.UserInfo
	if e := db.DB.Model(&userModel.UserInfo{}).Where("id=?", idInt).First(&instance).Error; e != nil {
		common.SaveError(errorx.Wrap(e))
		c.JSON(500, gin.H{"message": errorx.Wrap(e).Error()})
		return
	}
	if e := db.DB.Model(&userModel.UserInfo{}).Where("id=?", id).Delete(&userModel.UserInfo{}).Error; e != nil {
		common.SaveError(errorx.Wrap(e))
		c.JSON(500, gin.H{"message": errorx.Wrap(e).Error()})
		return
	}
	if instance.RedisKey() != "" {
		conn := redistool.RedisPool.Get()
		defer conn.Close()
		instance.DeleteFromRedis(conn)
	}
	c.JSON(200, gin.H{"message": "success"})
}
